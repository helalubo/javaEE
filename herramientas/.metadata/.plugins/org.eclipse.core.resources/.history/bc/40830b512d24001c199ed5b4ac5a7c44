package com.helalubo.mook.banco.model;

import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.math.BigDecimal;
import java.util.Optional;

import org.junit.jupiter.api.Test;

import com.helalubo.mook.cuenta.model.Cuenta;

public class BancoTest {

	@Test
	void testRelacionBancocuentas() {
		Cuenta cuenta1 = new Cuenta("helalubo",new BigDecimal("700000"));
		Cuenta cuenta2 = new Cuenta("maite",new BigDecimal("900000"));
		
		Banco helaBank = new Banco("HelaBank");
		helaBank.addCuenta(cuenta1);
		helaBank.addCuenta(cuenta2);
		assertAll(
				() ->{assertTrue(helaBank.getCuentas()
						.stream()
						.filter(c->"helalubo".equals(c.getPersona()))
						.map(p ->p.getPersona())
						.findFirst().isPresent());	},
				() ->{assertEquals(2, helaBank.getCuentas().size());},
				()->{
					String expected = "helaslubo";
					Optional<String> actual = 
							helaBank.getCuentas()
							.stream()
							.filter(c->expected.equals(c.getPersona()))
							.map(p ->p.getPersona())
							.findFirst();
					assertEquals(expected, actual.isEmpty()? "Cliente no encontrado" :);
				
				}
				);
		assertEquals(2, helaBank.getCuentas().size());
	
	}

	@Test
	void testTransferirDineroCuentas() {
	
		Cuenta cuenta1 = new Cuenta("helalubo",new BigDecimal("700000"));
		Cuenta cuenta2 = new Cuenta("maite",new BigDecimal("900000"));	
		Banco helaBank = new Banco("HelaBank");
		helaBank.transferir(cuenta1, cuenta2, new BigDecimal("99999"));
		assertEquals("999999", cuenta2.getSaldo().toPlainString());
		assertEquals("600001", cuenta1.getSaldo().toPlainString());
		
		
		
		
	}
	
	@Test
	void testRelacionBancoCuentas() {
		Cuenta cuenta1 = new Cuenta("helalubo",new BigDecimal("700000"));
		Cuenta cuenta2 = new Cuenta("maite",new BigDecimal("900000"));
		
		Banco helaBank = new Banco("HelaBank");
		helaBank.addCuenta(cuenta1);
		helaBank.addCuenta(cuenta2);
		assertEquals(2, helaBank.getCuentas().size());
	
		
		
		
		
	}
	
	@Test
	void verificaIgualdadEnElNombre() {
		Banco helaBank = new Banco("HelaBank");
		String expected = "HelaBank";
		String actual = helaBank.getNombre();
		assertEquals(expected, actual);
	}
	
	@Test
	void testTieneCuentaEnElBanco() {

		Cuenta cuenta1 = new Cuenta("helalubo",new BigDecimal("700000"));
		Cuenta cuenta2 = new Cuenta("maite",new BigDecimal("900000"));
		
		Banco helaBank = new Banco("HelaBank");
		helaBank.addCuenta(cuenta1);
		helaBank.addCuenta(cuenta2);
		
		String expected = "helalubo";
		String actual = 
				helaBank.getCuentas()
				.stream()
				.filter(c->expected.equals(c.getPersona()))
				.map(p ->p.getPersona())
				.findFirst().get()
				.toString();
		assertEquals(expected, actual);
					
	}
	
	@Test
	void testEstaPresente() {
		Cuenta cuenta1 = new Cuenta("helalubo",new BigDecimal("700000"));
		Cuenta cuenta2 = new Cuenta("maite",new BigDecimal("900000"));
		
		Banco	 helaBank = new Banco("HelaBank");
		helaBank.addCuenta(cuenta1);
		helaBank.addCuenta(cuenta2);
		assertTrue(helaBank.getCuentas()
				.stream()
				.filter(c->"helalubo".equals(c.getPersona()))
				.map(p ->p.getPersona())
				.findFirst().isPresent());
	}
}
